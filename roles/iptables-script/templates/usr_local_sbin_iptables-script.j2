#!/bin/sh

outbound_reject_from_users='{{ network.iptables_script.outbound_reject_from_users  | default("")}}'

set -e

ewarn() {
    echo ">>> [WARN] $*" >&2
}

# There seems to be some xtables lock race condition on boot with Docker.
iptables() {
    command iptables -w 5 "$@"
}

ip6tables() {
    command ip6tables -w 5 "$@"
}

iptables_both() {
    for ipt in iptables ip6tables; do
        "${ipt}" "$@"
    done
}

if [ "$1" != "skip-purge" ]; then
    # Purge current rules.
    iptables_both -F
    iptables_both -X
    iptables_both -t nat -F
    iptables_both -t nat -X
    iptables_both -t mangle -F
    iptables_both -t mangle -X
fi

# Default policy, drop incoming, allow outgoing.
iptables_both -P INPUT DROP
iptables_both -P FORWARD DROP
iptables_both -P OUTPUT ACCEPT

# Log the DROP.
iptables_both -N LOGDROP
iptables_both -A LOGDROP -j LOG --log-level 4 --log-prefix '[LOG DROP] '
iptables_both -A LOGDROP -j DROP

# Log the REJECT
iptables_both -N LOGREJECT
iptables_both -A LOGREJECT -j LOG --log-level 4 --log-prefix '[LOG REJECT] '
iptables_both -A LOGREJECT -j REJECT

# Drop junk
iptables_both -A INPUT -m conntrack --ctstate INVALID -j DROP
iptables_both -A FORWARD -m conntrack --ctstate INVALID -j DROP
iptables_both -A OUTPUT -m conntrack --ctstate INVALID -j DROP

# Don't kill already spared connections,
iptables_both -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
iptables_both -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

# Drop bogus packets
iptables_both -A INPUT -p tcp -m tcp --tcp-flags SYN,FIN SYN,FIN -j DROP
iptables_both -A INPUT -p tcp -m tcp --tcp-flags SYN,RST SYN,RST -j DROP

# Drop excessive RST packets to avoid SMURF attacks, by given the next real data packet in the sequence a better chance to arrive first.
iptables_both -A INPUT -p tcp -m tcp --tcp-flags RST RST -m limit --limit 2/second --limit-burst 2 -j ACCEPT

{% if network.iptables_script.mdns.enabled is defined and network.iptables_script.mdns.enabled %}
# mdns
{% if network.iptables_script.mdns.limit_to_interfaces is defined %}
{% for interface in network.iptables_script.mdns.limit_to_interfaces %}
iptables_both -I INPUT -i {{ interface }} -p udp --dport 5353 -j ACCEPT
{% endfor %}
{% else %}
iptables_both -I INPUT -p udp --dport 5353 -j ACCEPT
{% endif %}
{% endif %}

{% if network.iptables_script.forward.enabled is defined and network.iptables_script.forward.enabled %}
# forward
echo 1 >/proc/sys/net/ipv4/ip_forward
{% for subnet in network.iptables_script.forward.destination_subnets %}
iptables -A FORWARD -d {{ subnet }} -j ACCEPT
{% endfor %}
{% endif %}

# Drop all outgoing traffic from specified users.
for i in ${outbound_reject_from_users}; do
    if getent passwd "$i" >/dev/null; then
        iptables -A OUTPUT -p tcp -m owner --uid-owner "${i}" -j LOGREJECT
    else
        ewarn "User $i does not exist, skipping entry for said user."
    fi
done

# Allow for any traffic on loopback.
iptables_both -A INPUT -i lo -j ACCEPT
iptables_both -A OUTPUT -o lo -j ACCEPT

{% if network.iptables_script.ping_response is defined and network.iptables_script.ping_response %}
# Respond to ping.
iptables -A INPUT -p icmp --icmp-type 8 -m state --state NEW,ESTABLISHED,RELATED -j ACCEPT
{% endif %}

# Accept all ICMP IPv6.
ip6tables -A INPUT -p ipv6-icmp -j ACCEPT

# Accept DHCPv6 incoming traffic
#ip6tables -A INPUT -d fe80::/64 -p udp -m udp --dport 546 -m state --state NEW -j ACCEPT

{% if network.iptables_script.open_ports is defined %}
# Accept inbound connections on specified ports.
{% for port in network.iptables_script.open_ports %}
iptables_both -A INPUT -p tcp --dport {{ port }} -j ACCEPT
iptables_both -A INPUT -p udp --dport {{ port }} -j ACCEPT
{% endfor %}
{% endif %}
